;; Configuration file for service settings
{:deps {org.clojure/clojure {:mvn/version "1.10.3"}
        com.sun.mail/javax.mail {:mvn/version "1.6.2"}
        google-api-client/google-api-client {:mvn/version "1.32.1"}
        google-oauth-client/google-oauth-client-jetty {:mvn/version "1.32.1"}
        google-api-services-gmail/v1-rev20211011-1.32.1 {:mvn/version "1.32.1"}
        }
 :paths ["src" "resources"]
 :aliases {:dev {:extra-paths ["test"]
                 :extra-deps {;; Add development dependencies here
                              }}
           :uberjar {:main-opts ["-m" "dolores.core"]}}}
(ns dolores.utils
  (:require [clojure.core.async :as async]))

(defn merge-channels [channels]
  ;; Merge multiple channels into a single channel
  (let [merged-ch (async/chan)]
    (doseq [ch channels]
      (async/go-loop []
        (when-let [email (async/<! ch)]
          (async/>! merged-ch email)
          (recur))))
    merged-ch))
(ns dolores.llm)

(defprotocol LLM
  "Protocol for interacting with Large Language Models (LLMs)."

  (generate-text [this prompt]
    "Generate text based on the given prompt."))
(ns dolores.llm)

(defprotocol LLM
  "Protocol for interacting with Large Language Models (LLMs)."

  (generate-text [this prompt]
    "Generate text based on the given prompt."))
(ns dolores.utils.storage
  (:require [clojure.edn :as edn]
            [clojure.java.io :as io]))

(defn read-edn-file [file-path]
  "Read data from an EDN file."
  (with-open [r (io/reader file-path)]
    (edn/read r)))

(defn write-edn-file [file-path data]
  "Write data to an EDN file."
  (with-open [w (io/writer file-path)]
    (binding [*print-dup* true]
      (prn data w))))
